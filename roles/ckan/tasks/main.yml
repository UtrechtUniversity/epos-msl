---
# copyright Utrecht University

- name: Ensure CKAN prerequisites are installed
  ansible.builtin.package:
    name: '{{ item }}'
    state: present
  with_items:
    - gcc
    - make
    - libpq5
    - python3-pastescript
    - python3-virtualenv
    - python3-distutils
    - python3-pip
    - supervisor


- name: Ensure CKAN storage path is present
  ansible.builtin.file:
    path: "{{ ckan_storage_path }}"
    state: directory
    owner: www-data
    group: www-data
    mode: 0775


- name: Install CKAN package
  ansible.builtin.apt:
    deb: '{{ ckan_package_url }}'


- name: Ensure a 'wheel' group exists
  ansible.builtin.group:
    name: wheel
    state: present


- name: Allow 'wheel' group to have passwordless sudo
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: visudo -cf %s


- name: Ensure CKAN user exists
  ansible.builtin.user:
    name: ckan
    comment: "CKAN User"
    home: /usr/lib/ckan
    shell: /bin/bash
    groups: wheel
    append: true


- name: Ensure CKAN database exists
  become_user: postgres
  become: true
  community.general.postgresql_db:
    name: "ckan_default"
    encoding: "{{ ckan_db_encoding }}"
    lc_collate: "{{ ckan_db_lc_collate }}"
    lc_ctype: "{{ ckan_db_lc_ctype }}"
    template: template0
  vars:
    # Pipelininig is needed for internal temporary files in postgresl module
    ansible_ssh_pipelining: true


- name: Ensure CKAN database user exists
  become_user: postgres
  become: true
  community.general.postgresql_user:
    db: "ckan_default"
    name: "ckan_default"
    password: "{{ ckan_database_password }}"
    priv: ALL
  vars:
    # Pipelininig is needed for internal temporary files in postgresl module
    ansible_ssh_pipelining: true


- name: Ensure CKAN directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
  with_items:
    - /usr/lib/ckan
    - /usr/lib/ckan/default
    - /etc/ckan
    - /etc/ckan/default


- name: Generate session secret
  ansible.builtin.shell: openssl rand -base64 32 > /etc/ckan/default/session_secret
    creates=/etc/ckan/default/session_secret
  when: not ansible_check_mode


- name: Read session secret
  ansible.builtin.command: cat /etc/ckan/default/session_secret
  register: session_secret
  changed_when: false


- name: Generate unique application instance identifier
  ansible.builtin.shell: 'echo {{ ansible_hostname | to_uuid }} > /etc/ckan/default/app_instance_uuid
    creates=/etc/ckan/default/app_instance_uuid'
  when: not ansible_check_mode


- name: Read unique application instance identifier
  ansible.builtin.command: cat /etc/ckan/default/app_instance_uuid
  register: app_instance_uuid
  changed_when: false


- name: Configure CKAN
  ansible.builtin.template:
    src: "ckan.ini.j2"
    dest: "{{ ckan_ini_file }}"
    owner: www-data
    group: www-data
    mode: 0644
  when: not ansible_check_mode


- name: Check Solr schema
  ansible.builtin.stat:
    path: /etc/solr/conf/schema.xml
  register: solrschema


- name: Ensure default schema has been backed up
  ansible.builtin.command: "mv /etc/solr/conf/schema.xml /etc/solr/conf/schema.xml.orig"
  when: solrschema.stat.exists and solrschema.stat.isreg is defined and solrschema.stat.isreg


- name: Use custom Solr scheme for EPOS-MSL
  become_user: root
  become: true
  ansible.builtin.copy:
    src: solrschema.xml
    dest: /etc/solr/conf/schema.xml
    owner: root
    group: root
    mode: 0644
  notify: Restart Solr


- name: Check who.ini
  ansible.builtin.stat:
    path: /etc/ckan/default/who.ini
  register: whoini


- name: Ensure who.ini has been backed up
  ansible.builtin.command: "mv /etc/ckan/default/who.ini /etc/ckan/default/who.ini.orig"
  when: whoini.stat.exists and whoini.stat.isreg is defined and whoini.stat.isreg


- name: Ensure CKAN who.ini is symlinked
  become_user: root
  become: true
  ansible.builtin.file:
    src: /usr/lib/ckan/default/src/ckan/who.ini
    dest: /etc/ckan/default/who.ini
    state: link


# Needed for preventing warnings/error when installing MSL plugins
- name: Install wheel package
  ansible.builtin.pip:
    name: wheel
    virtualenv: /usr/lib/ckan/default


- name: Install CKAN scheming plugin
  ansible.builtin.pip:
    name: "https://github.com/ckan/ckanext-scheming/archive/{{ ckanext_scheming_version }}.tar.gz"
    virtualenv: /usr/lib/ckan/default
    extra_args: "--upgrade"
  notify: Restart ckan-uwsgi


- name: Install CKAN MSL Core plugin
  ansible.builtin.pip:
    name: "git+https://github.com/UtrechtUniversity/msl_ckan_core@{{ ckan_msl_core_plugin_branch }}"
    virtualenv: /usr/lib/ckan/default
    extra_args: "--upgrade"
  notify: Restart ckan-uwsgi


- name: Clone CKAN MSL Core plugin for copying images
  ansible.builtin.git:
    repo: "https://github.com/UtrechtUniversity/msl_ckan_core"
    dest: /usr/lib/ckan/msl_ckan_core
    version: "{{ ckan_msl_core_plugin_branch }}"


# Workaround for issue where pip doesn't install static images in MSL core plugin
- name: Synchronize MSL Core plugin images
  ansible.posix.synchronize:
    src: /usr/lib/ckan/msl_ckan_core/ckanext/msl_ckan/public/
    dest: /usr/lib/ckan/default/lib/python3.8/site-packages/ckanext/msl_ckan/public/
  delegate_to: "{{ inventory_hostname }}"


- name: Install CKAN MSL Util plugin
  ansible.builtin.pip:
    name: "git+https://github.com/UtrechtUniversity/msl_ckan_util@{{ ckan_msl_util_plugin_branch }}"
    virtualenv: /usr/lib/ckan/default
    extra_args: "--upgrade"
  notify: Restart ckan-uwsgi


- name: Check CKAN database initialized
  become: true
  become_user: postgres
  ansible.builtin.command: 'psql -d ckan_default -c "select * from public.user"'
  ignore_errors: true
  register: userlist
  changed_when: false
  vars:
    ansible_ssh_pipelining: true


- name: Initialize CKAN database
  become_user: root
  become: true
  ansible.builtin.command: "/usr/bin/ckan --config {{ ckan_ini_file }} db init"
  vars:
    # Pipelininig is needed for internal temporary files
    ansible_ssh_pipelining: true
  when: 'userlist.rc !=0 or "default" not in userlist.stdout'
  notify: Restart Supervisor


- name: Check if CKAN admin user exists
  become_user: root
  become: true
  ansible.builtin.command: "/usr/bin/ckan -c {{ ckan_ini_file }} user list"
  changed_when: false
  register: ckan_admin_user
  vars:
    # Pipelininig is needed for internal temporary files
    ansible_ssh_pipelining: true


- name: Add CKAN admin user
  become_user: root
  become: true
  ansible.builtin.expect:
    command: '/usr/bin/ckan -c {{ ckan_ini_file }} user add ckanadmin password="{{ ckan_admin_password }}" email=ckanadmin@localhost name=ckanadmin'
    responses:
      user: y
  when: not ansible_check_mode and "name=ckanadmin" not in ckan_admin_user.stdout
  vars:
    # Pipelininig is needed for internal temporary files
    ansible_ssh_pipelining: true


- name: Convert CKAN admin user to sysadmin
  become_user: root
  become: true
  ansible.builtin.command: "/usr/bin/ckan -c {{ ckan_ini_file }} sysadmin add ckanadmin"
  when: ('"name=ckanadmin" not in ckan_admin_user.stdout') and not ansible_check_mode
  vars:
    # Pipelininig is needed for internal temporary files
    ansible_ssh_pipelining: true


- name: Ensure reverse proxy config for Nginx is present
  ansible.builtin.template:
    src: "nginx-ckan.j2"
    dest: "/etc/nginx/sites-available/ckan"
    owner: root
    group: root
    mode: 0644
  notify: Restart Nginx webserver


- name: Activate Nginx reverse proxy
  ansible.builtin.file:
    dest: "/etc/nginx/sites-enabled/ckan"
    src: "/etc/nginx/sites-available/ckan"
    state: link
  notify: Restart Nginx webserver


- name: Add cleanup job for CKAN Beaker session files
  ansible.builtin.cron:
    name: "Cleanup job for CKAN beaker session files"
    hour: "19"
    minute: "0"
    user: root
    job: "find /tmp/default/sessions -type f -mtime +1 -delete"
